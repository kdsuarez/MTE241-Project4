#include <stdio.h>
#include <errno.h>
#include <stdbool.h>
#include <stdlib.h>
#include <math.h>
#include "RTL.h"
#include "LPC17xx.H"
#include "GLCD.h"
#include "LED.h"
#include "KBD.h"
#include "ADC.h"
#include "MPU9250.h"
#include "joystick.h"

#define __FI 1

#define B   Black
#define W   White
#define M   Maroon

#define MAX_BALLS 10

OS_TID t_paddle_motion;   //assigned task ID of Task 1: Paddle Motion
OS_TID t_ball_motion;     //assigned task ID of Task 2: Ball Motion
OS_TID t_life_level;      //assigned task ID of Task 3: Life Level
OS_TID t_game_level;      //assigned task ID of Task 4: Game Level

OS_MUT mut_GLCD;          //mutex to control GLCD access

unsigned int ADCStat = 0;
unsigned int ADCValue = 0;

//Farayha&Kristine 
/*----------------------------------------------------------------------------
	GRAPHICS
 *---------------------------------------------------------------------------*/
// Ball graphic
unsigned short ball[] = { W, W, W, B, B, B, B, W, W, W,
                          W, W, B, B, B, B, B, B, W, W,
                          W, B, B, B, B, B, B, B, B, W,
                          W, B, B, B, B, B, B, B, B, W,
                          B, B, B, B, B, B, B, B, B, B,
                          B, B, B, B, B, B, B, B, B, B,
                          W, B, B, B, B, B, B, B, B, W,
                          W, B, B, B, B, B, B, B, B, W,
                          W, W, B, B, B, B, B, B, W, W,
                          W, W, W, B, B, B, B, W, W, W };

// Ball Overwrite graphic
unsigned short ball_overwrite[] = { W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W,
                                    W, W, W, W, W, W, W, W, W, W };

// Paddle graphic
unsigned short paddle[] = { W, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, W,
                            B, B, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, B, B,
                            B, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, B,
                            B, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, B,
                            B, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, B,
                            B, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, B,
                            B, B, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, M, B, B,
                            W, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, B, W };
  
// Paddle Overwrite graphic
unsigned short paddle_overwrite[] = { W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W,
                                      W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W, W };

/*----------------------------------------------------------------------------
	GLOBAL VARIABLES
 *---------------------------------------------------------------------------*/
// Ball struct
 typedef struct ball {
	unsigned int x_ball;
	unsigned int y_ball;
	unsigned int dx;
	unsigned int dy;
    int x_dir;
    int y_dir;
	unsigned int is_spawned;
} ball_t;

// Ball array; maximum 10 balls on screen at a time
ball_t ball_spawn[10];

// Initialize paddle position and size
unsigned int x_paddle = 120;
unsigned int y_paddle = 300;

unsigned int ball_speed = 20;

unsigned int life = 5;
unsigned int button_press = 0;
unsigned int on_screen = 1;
unsigned int paddle_hit = 0;

/*----------------------------------------------------------------------------
	HELPER FUNCTIONS
 *---------------------------------------------------------------------------*/
// Initializes ball struct parameters
void ball_init (void) {
	int i;
	
	for(i = 0; i < MAX_BALLS; i++) {
		ball_spawn[i].x_ball = 100;
		ball_spawn[i].y_ball = 0;
		//while(rand() != 0) rand_num = rand();
		ball_spawn[i].dx = 10;
		ball_spawn[i].dy = 10;
        ball_spawn[i].x_dir = 1;
        ball_spawn[i].y_dir = -1;
        if(i == 0) ball_spawn[i].is_spawned = 1;
        else ball_spawn[i].is_spawned = 0;
	}
}

// Interrupt handler for INT() button
void EINT3_IRQHandler (void) {
  NVIC_DisableIRQ(EINT3_IRQn);
  LPC_GPIOINT->IO2IntClr |= (1 << 10);
  button_press = 1;
  NVIC_EnableIRQ(EINT3_IRQn);
}

// Button set-up
void button_setup (void) {
  LPC_PINCON->PINSEL4 &= ~(3 << 20);
  LPC_GPIO2->FIODIR &= ~(1 << 10);
  LPC_GPIOINT->IO2IntEnF |= (1 << 10);
  NVIC_EnableIRQ(EINT3_IRQn);
}

// Overwrites paddle graphic for left horizontal movement
void paddle_left (void) {
  os_mut_wait(mut_GLCD, 0xffff);
  GLCD_Bitmap(x_paddle, y_paddle, 50, 8, (unsigned char*)paddle_overwrite);
  if (x_paddle > 0) x_paddle -= 5;
  GLCD_Bitmap(x_paddle, y_paddle, 50, 8, (unsigned char*)paddle);
  os_mut_release(mut_GLCD);
}

// Overwrites paddle graphic for right horizontal movement
void paddle_right (void) {
  os_mut_wait(mut_GLCD, 0xffff);
  GLCD_Bitmap(x_paddle, y_paddle, 50, 8, (unsigned char*)paddle_overwrite);
  if (x_paddle < 190) x_paddle += 5;
  GLCD_Bitmap(x_paddle, y_paddle, 50, 8, (unsigned char*)paddle);
  os_mut_release(mut_GLCD);
}

// Determines ball(s) movement on LCD screen 
void ball_move (unsigned int i) {
    int j;
	//Ball movement in horizontal direction
	if (ball_spawn[i].x_ball <= 1 || ball_spawn[i].x_ball+10 >= 239) { //if ball hits left or right wall
		ball_spawn[i].x_dir *= -1;
		ball_spawn[i].x_ball += ball_spawn[i].dx * ball_spawn[i].x_dir;
	} 
	else { //if ball doesn't hit left/right wall				//CODE: if (x_ball >= 1 && (x_ball+10) <= 239)
	    ball_spawn[i].x_ball += ball_spawn[i].dx * ball_spawn[i].x_dir;
		if(ball_spawn[i].x_ball < 1)
            ball_spawn[i].x_ball = 0;
        else if(ball_spawn[i].x_ball+10 > 239) 
            ball_spawn[i].x_ball = 230;
	}
	
	//Ball movement in vertical direction
	if (ball_spawn[i].y_ball <= 1) { //hits top wall
		ball_spawn[i].y_dir *= -1;
		ball_spawn[i].y_ball += ball_spawn[i].dy * ball_spawn[i].y_dir;
	}
	else if ((ball_spawn[i].y_ball+10 == 300) && (ball_spawn[i].x_ball+6 >= x_paddle) && (ball_spawn[i].x_ball+3 <= x_paddle+50)) { //if ball hits paddle
		ball_spawn[i].y_dir *= -1;
		ball_spawn[i].y_ball += ball_spawn[i].dy * ball_spawn[i].y_dir;
        paddle_hit += 1;
	}
	else if (ball_spawn[i].y_ball > 1 && (ball_spawn[i].y_ball+10) <= 320) { //if ball doesn't hit top wall
        ball_spawn[i].y_ball += ball_spawn[i].dy * ball_spawn[i].y_dir;
    }
	else if ((ball_spawn[i].y_ball+10) > 320) {
		life -= 1;
        // decrement number of balls on screen
        on_screen--;
        for (j = i; j < MAX_BALLS; j++) {
            ball_spawn[j] = ball_spawn[j+1];
        }
        // initialize new ball for later
        ball_spawn[MAX_BALLS-1].x_ball = 100;
        ball_spawn[MAX_BALLS-1].y_ball = 0;
        ball_spawn[MAX_BALLS-1].dx = 10;
        ball_spawn[MAX_BALLS-1].dy = 10;
        ball_spawn[MAX_BALLS-1].x_dir = 1;
        ball_spawn[MAX_BALLS-1].y_dir = -1;
        // decrement life
	}
}

/*----------------------------------------------------------------------------
	TASKS
 *---------------------------------------------------------------------------*/
// Task 1 (Paddle Motion): moves paddle position along the horizontal direction
__task void paddle_motion (void) {
	GLCD_Bitmap(x_paddle, y_paddle, 50, 8, (unsigned char*)paddle);
	while(1) {
		if (joystick_read() == JOY_LEFT) {
            paddle_left();
		}
    else if (joystick_read() == JOY_RIGHT) {
			paddle_right();
    }
    os_dly_wait(5);
	}
}

// Task 2 (Ball Motion): defines movement of ball(s) in x & y directions
__task void ball_motion (void) {
  unsigned int i;
  
  while(1) {
    //CODE FOR BALL BOUNCE OFF WALL AND PADDLE
    if(button_press == 1) {
      if(on_screen < 10) {
          on_screen++;
      }
      button_press = 0;
    }
    
    for(i = 0; i < on_screen; i++) {
        os_mut_wait(mut_GLCD, 0xffff);
        GLCD_Bitmap(ball_spawn[i].x_ball, ball_spawn[i].y_ball, 10, 10, (unsigned char*)ball_overwrite);
        ball_move(i);
        GLCD_Bitmap(ball_spawn[i].x_ball, ball_spawn[i].y_ball, 10, 10, (unsigned char*)ball);
        os_mut_release(mut_GLCD);
    }
    
//     if (button_press == 1) {
//       GLCD_Bitmap(x_ball, y_ball, 10, 10, (unsigned char*)ball_overwrite);
//       x_ball = 1;
//       y_ball = 1;
//       button_press = 0;
//     }

		
// 		GLCD_Bitmap(x_ball, y_ball, 10, 10, (unsigned char*)ball_overwrite);
// 		ball_move(x_ball, y_ball);
// 		GLCD_Bitmap(x_ball, y_ball, 10, 10, (unsigned char*)ball);
// 		os_mut_release(mut_GLCD);
		
		//MISSING A CONDITION FOR WHEN BALL HITS BOTTOM WALL
    paddle_right();
    paddle_left();
	
    os_dly_wait(ball_speed);
  }
}

// Task 3 (Life Level): turns on/off LED lights to indicate life level in game
__task void life_level (void) {	
	int i, LED;
    
	while(1) {
		if(life > 0)
			LED_display((1 << life) - 1);
        
	}
		os_dly_wait(10);
}

// Task 4 (Game Level): increases game difficulty level after a period of time
__task void game_level (void) {
  while(1) {
      if (paddle_hit < 5) {
          ball_speed = 20;
      }
      else if (paddle_hit >= 5) {
//           if(on_screen < 2) on_screen++;
          ball_speed = 15;
      }
      else if (paddle_hit >= 10) {
//           if(on_screen < 3) on_screen++;
          ball_speed = 10;
      }
      else if (paddle_hit >= 20) {
//           if(on_screen < 5) on_screen++;
          ball_speed = 5;
      }
      else if (paddle_hit >= 40 && paddle_hit < 50) {
//           if(on_screen < 7) on_screen++;
          ball_speed = 4;
      }
      else {
//           on_screen = 10;
          ball_speed = 2;
      }
  }
  os_dly_wait(10);
}

// add task for push button to add balls? or integrate this function into ball_motion
// if time, add task for added life

__task void init (void) {
	int i;
	os_mut_init(mut_GLCD);

    button_press = 0;
    
    ball_init();
	
	t_paddle_motion = os_tsk_create (paddle_motion, 0);
	t_ball_motion = os_tsk_create (ball_motion, 0);
	t_life_level = os_tsk_create (life_level, 0);
    t_game_level = os_tsk_create (game_level, 0);
  
	os_tsk_delete_self ();
}

/*----------------------------------------------------------------------------
	MAIN FUNCTION
 *---------------------------------------------------------------------------*/
int main(void) {
	NVIC_EnableIRQ( ADC_IRQn );				/* Enable ADC interrupt handler		*/
	
    button_setup();
	LED_setup();							/* Initialize the LEDs				*/
	GLCD_Init();							/* Initialize the GLCD				*/
	KBD_Init ();							/* initialize Push Button			*/
	ADC_Init ();							/* initialize the ADC				*/

	GLCD_Clear(White);						/* Clear the GLCD					*/

	os_sys_init(init);						/* Initialize RTX and start init	*/

//   SystemInit();
//   GLCD_Init();
//   GLCD_Clear(W);
//   GLCD_Bitmap(120, 160, 10, 10, (unsigned char*)ball);
//   GLCD_Bitmap(120, 310, 50, 8, (unsigned char*)paddle);
//   
//   while(1);
}


// /*----------------------------------------------------------------------------
// 	switch LED on
//  *---------------------------------------------------------------------------*/
// void LED_on	(unsigned char led) {
// 	LED_set(led); //turn on the physical LED
// 	os_mut_wait(mut_GLCD, 0xffff); //Rest of code updates graphics on the LCD
// 	GLCD_SetBackColor(White);
// 	GLCD_SetTextColor(Green);
// 	GLCD_DisplayChar(4, 5+led, __FI, 0x80+1); 	/* Circle Full	*/
// 	os_mut_release(mut_GLCD);
// }

// /*----------------------------------------------------------------------------
// 	switch LED off
//  *---------------------------------------------------------------------------*/
// void LED_off (unsigned char led) {
// 	LED_clear(led); //turn off the physical LED
// 	os_mut_wait(mut_GLCD, 0xffff); //Rest of code updates graphics on the LCD
// 	GLCD_SetBackColor(White);
// 	GLCD_SetTextColor(Green);
// 	GLCD_DisplayChar(4, 5+led, __FI, 0x80+0);	/* Circle Empty	*/
// 	os_mut_release(mut_GLCD);
// }


// /*----------------------------------------------------------------------------
// 	Task 1 'LEDs': Cycle through LEDs
//  *---------------------------------------------------------------------------*/
// __task void led (void) {
// 	int num_led = 3; //the number of LEDs to cycle through
// 	int on = 0;
// 	int off = 0;
// 	
// 	while(1)
// 	{
// 		for(on = 0; on < num_led; on++)
// 		{
// 			off = on - 1; //Figure out which LED to turn off, wrap around if needed
// 			if(off == -1)
// 			{ 
// 				off = num_led -1;
// 			}
// 			LED_off(off);			
// 			LED_on (on);
// 			os_dly_wait (50);			/* delay 50 clock ticks				*/
// 		}
// 	}
// }

// /*----------------------------------------------------------------------------
// 	Task 2 'keyread': process key stroke from int0 push button
//  *---------------------------------------------------------------------------*/
// __task void keyread (void) {
// 	while (1) {							/* endless loop						*/
// 		if (INT0_Get() == 0) {			/* if key pressed					*/
// 			LED_set(7) ;				/* toggle eigth LED if pressed		*/
// 		}
// 		os_dly_wait (5);				/* wait for timeout: 5 ticks		*/
// 	}
// }

// /*----------------------------------------------------------------------------
// 	Task 3 'ADC': Read potentiometer
//  *---------------------------------------------------------------------------*/
// /*NOTE: You need to complete this function*/
// __task void adc (void) {
// 	while (1) {
// 		os_dly_wait (50);
// 	}
// }

// /*----------------------------------------------------------------------------
// 	Task 4 'joystick': process an input from the joystick
//  *---------------------------------------------------------------------------*/
// /*NOTE: You need to complete this function*/
// __task void joystick (void) {
// 	for (;;) {
// 		if (KBD_Get() == KBD_LEFT) {
// 			LED_set(3) ;
// 		} else if (KBD_Get() == KBD_RIGHT) {
// 			LED_set(4) ;
// 		} else if (KBD_Get() == KBD_UP) {
// 			LED_set(5) ;
// 		} else if (KBD_Get() == KBD_DOWN) {
// 			LED_set(6) ;
// 		}
// 		os_dly_wait (5);				/* wait for timeout: 5 ticks		*/
// 	}
// }


// /*----------------------------------------------------------------------------
// 	Task 5 'lcd': LCD Control task
//  *---------------------------------------------------------------------------*/
// __task void lcd (void) {
// 	for (;;) {
// 		os_mut_wait(mut_GLCD, 0xffff);
// 		GLCD_SetBackColor(Blue);
// 		GLCD_SetTextColor(White);
// 		GLCD_DisplayString(0, 0, __FI, "MTE 241");
// 		GLCD_DisplayString(1, 0, __FI, "RTX");
// 		GLCD_DisplayString(2, 0, __FI, "Project 4 Demo");
// 		os_mut_release(mut_GLCD);
// 		os_dly_wait (400);

// 		os_mut_wait(mut_GLCD, 0xffff);
// 		GLCD_SetBackColor(Blue);
// 		GLCD_SetTextColor(Red);
// 		GLCD_DisplayString(0, 0, __FI, "MTE 241");
// 		GLCD_DisplayString(1, 0, __FI, "Other text");
// 		GLCD_DisplayString(2, 0, __FI, "More text");
// 		os_mut_release(mut_GLCD);
// 		os_dly_wait (400);
// 	}
// }

// /*----------------------------------------------------------------------------
// 	Task 6 'init': Initialize
//  *---------------------------------------------------------------------------*/
// /* NOTE: Add additional initialization calls for your tasks here */
// __task void init (void) {
// 	os_mut_init(mut_GLCD);

// 	t_led = os_tsk_create (led, 0);			/* start the led task				*/
// 	t_kbd = os_tsk_create (keyread, 0);		/* start the kbd task				*/
// 	t_adc = os_tsk_create (adc, 0);			/* start the adc task				*/
// 	t_jst = os_tsk_create (joystick, 0);	/* start the joystick task			*/
// 	t_lcd = os_tsk_create (lcd, 0);			/* start task lcd					*/
// 	os_tsk_delete_self ();
// }

// /*----------------------------------------------------------------------------
// 	Main: Initialize and start RTX Kernel
//  *---------------------------------------------------------------------------*/
// int main (void) {
// 	NVIC_EnableIRQ( ADC_IRQn );				/* Enable ADC interrupt handler		*/
// 	
// 	LED_setup();							/* Initialize the LEDs				*/
// 	GLCD_Init();							/* Initialize the GLCD				*/
// 	KBD_Init ();							/* initialize Push Button			*/
// 	ADC_Init ();							/* initialize the ADC				*/

// 	GLCD_Clear(White);						/* Clear the GLCD					*/
// 	os_sys_init(init);						/* Initialize RTX and start init	*/
// }
